@using genegames.Services
@using static genegames.Services.GameStateService
@typeparam TGame
@inject GameStateService GameStateService

<div class="game-container">
    <GameControls/>
    <h3>Current state is: @GameStateService.CurrentState</h3>

    <div class="game-area" style="@(GameStateService.CurrentState == GameState.GameOver ? "background-color: gray; pointer-events: none;" : "")">
        @ChildContent
    </div>
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment GameSpecificControls { get; set; }

    private bool IsPauseResumeButtonDisabled => GameStateService.CurrentState != GameState.Running;
    private string PauseResumeButtonText => GameStateService.CurrentState == GameState.Paused ? "Resume" : "Pause";
    private Timer _timer;
    private int _elapsedSeconds;

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "r" || e.Key == "R")
        {
            GameStateService.NewGame();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        GameStateService.OnGameStateChanged += GameStateChanged;
    }

    public void Dispose()
    {
        GameStateService.OnGameStateChanged -= GameStateChanged;
    }

    protected void GameStateChanged()
    {
        StateHasChanged();
    }
}
